// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (id,amount,plan,customer_id,first_name,last_name,email,status,transaction_id,created_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type CreateOrderParams struct {
	ID            string
	Amount        int32
	Plan          string
	CustomerID    string
	FirstName     string
	LastName      sql.NullString
	Email         string
	Status        string
	TransactionID sql.NullString
	CreatedAt     time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.Amount,
		arg.Plan,
		arg.CustomerID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Status,
		arg.TransactionID,
		arg.CreatedAt,
	)
	return err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    id,
    amount,
    currency,
    payment_intent,
    payment_method,
    expire_month,
    expire_year,
    transaction_status,
    created_at,
    updated_at
    ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) RETURNING id, amount, currency, payment_intent, payment_method, expire_month, expire_year, transaction_status, created_at, updated_at
`

type CreateTransactionParams struct {
	ID                string
	Amount            int32
	Currency          string
	PaymentIntent     string
	PaymentMethod     string
	ExpireMonth       string
	ExpireYear        string
	TransactionStatus sql.NullString
	CreatedAt         time.Time
	UpdatedAt         sql.NullTime
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Amount,
		arg.Currency,
		arg.PaymentIntent,
		arg.PaymentMethod,
		arg.ExpireMonth,
		arg.ExpireYear,
		arg.TransactionStatus,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.PaymentIntent,
		&i.PaymentMethod,
		&i.ExpireMonth,
		&i.ExpireYear,
		&i.TransactionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :one
SELECT id, amount, plan, customer_id, first_name, last_name, email, status, transaction_id, created_at FROM orders WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrders(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrders, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Plan,
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Status,
		&i.TransactionID,
		&i.CreatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders SET status = $2, transaction_id = $3  WHERE id = $1 RETURNING id, amount, plan, customer_id, first_name, last_name, email, status, transaction_id, created_at
`

type UpdateOrderStatusParams struct {
	ID            string
	Status        string
	TransactionID sql.NullString
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status, arg.TransactionID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Plan,
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Status,
		&i.TransactionID,
		&i.CreatedAt,
	)
	return i, err
}
